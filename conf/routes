
# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# An example controller showing a sample home page
GET     /                           controllers.HomeController.index
# An example controller showing how to use dependency injection
GET     /count                      controllers.CountController.count
# An example controller showing how to write asynchronous code

#GET     /message                    controllers.AsyncController.message

#
#GET     /ws/:token                         controllers.WebSocketController.ws(token)
#GET     /ws1/:token                         controllers.WebSocketController.ws1(token)

#GET     /stream                             controllers.StreamController.m
#GET     /mongo                              controllers.DBController.findByName(name)

#
GET     /wx/valid                      wx.WxController.valid(signature, timestamp, nonce, echostr)

#
POST    /wx/valid                     wx.WxController.receiveEvent(signature, timestamp, nonce, echostr)

#
GET       /wx/ip                        wx.WxController.ip
GET       /wx/menu/get                  wx.WxController.getMenu
GET       /wx/menu/delete               wx.WxController.deleteMenu
GET       /wx/menu/create               wx.WxController.createMenu

GET       /wx/message/custom            wx.WxController.customMessage

# oauth2 callback
GET       /wx/callback                   wx.WxController.callback(code: Option[String], state)

# jws
GET       /wx/jwt                         wx.WxController.jwt

# TEST redirect
GET       /crm/v1/sdk/hospital/redirect           sales.controllers.HospitalController.redirect

# App System

# Area
GET       /crm/v1/sdk/area                        sales.controllers.AreaController.query(name: Option[String])
GET       /crm/v1/sdk/area/:id                    sales.controllers.AreaController.read(id)
POST      /crm/v1/sdk/area                        sales.controllers.AreaController.create
DELETE    /crm/v1/sdk/area/:id                    sales.controllers.AreaController.delete(id)

# Hospital
GET       /crm/v1/sdk/hospital                    sales.controllers.HospitalController.query(name: Option[String])
GET       /crm/v1/sdk/hospital/:id                sales.controllers.HospitalController.read(id)
POST      /crm/v1/sdk/hospital                    sales.controllers.HospitalController.create
PATCH     /crm/v1/sdk/hospital/:id                sales.controllers.HospitalController.edit(id)
#DELETE    /crm/v1/sdk/hospital/:id               sales.controllers.HospitalController.delete(id)
POST      /crm/v1/sdk/hospital/:id/develop        sales.controllers.HospitalController.develop(id)
POST      /crm/v1/sdk/hospital/:id/resume         sales.controllers.HospitalController.resume(id)
POST      /crm/v1/sdk/hospital/:id/partner        sales.controllers.HospitalController.becomePartner(id)
POST      /crm/v1/sdk/hospital/:id/archive        sales.controllers.HospitalController.editArchive(id)


# Doctor
POST      /crm/v1/sdk/hospital/:id/doctor         sales.controllers.HospitalController.addDoctor(id)
GET       /crm/v1/sdk/hospital/:id/doctor         sales.controllers.HospitalController.queryDoctor(id: String, name: Option[String])
DELETE    /crm/v1/sdk/doctor/:id                  sales.controllers.HospitalController.deleteDoctor(id: String)

#Order
POST      /crm/v1/sdk/hospital/:id/order          sales.controllers.OrderController.createOrder(id)
GET       /crm/v1/sdk/hospital/:id/order          sales.controllers.OrderController.queryByHospital(id)
GET       /crm/v1/sdk/order                       sales.controllers.OrderController.query(no: Option[String], status: Option[String])
GET       /crm/v1/sdk/order/:id                   sales.controllers.OrderController.read(id)

POST       /crm/v1/sdk/order/:id/commit           sales.controllers.OrderController.commit(id)
DELETE    /crm/v1/sdk/order/:id                   sales.controllers.OrderController.cancel(id)
#POST      /crm/v1/sdk/order/:id/permit            sales.controllers.OrderController.permit(id)
#POST      /crm/v1/sdk/order/:id/reject            sales.controllers.OrderController.reject(id)
POST      /crm/v1/sdk/order/:id/confirm           sales.controllers.OrderController.confirm(id)
GET       /crm/v1/sdk/order/:id/goods             sales.controllers.OrderController.queryStockItemByOrder(id)

# Stock
POST      /crm/v1/sdk/order/:id/stock             sales.controllers.OrderController.createStockOrder(id)
POST      /crm/v1/sdk/stock/:id                   sales.controllers.OrderController.addStockItem(id)
DELETE    /crm/v1/sdk/stock/:id                   sales.controllers.OrderController.removeStockItem(id)
GET       /crm/v1/sdk/stock/:id                   sales.controllers.OrderController.queryStockItemByStock(id)

# Task
GET       /crm/v1/sdk/task                        sales.controllers.TaskController.query(status: Option[String], action: Option[String])
GET       /crm/v1/sdk/task/:id                    sales.controllers.TaskController.read(id)
POST      /crm/v1/sdk/task/:id/accept             sales.controllers.TaskController.accept(id)
POST      /crm/v1/sdk/task/:id/permit             sales.controllers.TaskController.permit(id)
POST      /crm/v1/sdk/task/:id/reject             sales.controllers.TaskController.reject(id)

# My
GET       /crm/v1/sdk/my/order                    sales.controllers.MyController.order(no: Option[String], status: Option[String])
GET       /crm/v1/sdk/my/task                     sales.controllers.MyController.task(status: Option[String], action: Option[String])

GET       /crm/v1/sdk/private                     sales.controllers.AreaController.privateApi

# User
GET       /crm/v1/sdk/auth/userProfile            authentication.AuthenticationController.userProfile
GET       /crm/v1/sdk/auth/user                   authentication.AuthenticationController.user(name)
POST      /crm/v1/sdk/auth/user/:id               authentication.AuthenticationController.editUser(id)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
